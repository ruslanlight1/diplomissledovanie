from flask import Flask, request, render_template, jsonify, url_for, Response
import numpy as np
import cv2
import os
import uuid
import json
import io, csv
from urllib.parse import quote
from datetime import datetime
from flask import session, redirect
from flask import Flask
from config import Config
from models import Result, db
from telethon.sync import TelegramClient
from telethon.errors import PeerIdInvalidError, UserPrivacyRestrictedError
import subprocess
import sys

app = Flask(__name__)
app.config.from_object(Config)
db.init_app(app)

MASK_PATH = "static/mask.png"
FILL_PATH = "static/fill.png"
BORDER_PATH = "static/border.png"
FRAGMENTS_DIR = 'static/dataset'
SMALL_FRAGMENT_IDS = [1, 4, 5, 6, 7, 11, 12, 13, 14, 15, 16, 21, 22, 23]
UPLOAD_DIR = "static/uploads"
USER_RESULTS_DIR = "static/user_results"
LINK_LOGS_DIR = "logs/links"
TEMPLATE_PATH = "static/template.png"

os.makedirs(UPLOAD_DIR, exist_ok=True)
os.makedirs(USER_RESULTS_DIR, exist_ok=True)
os.makedirs(LINK_LOGS_DIR, exist_ok=True)

def load_fragment_masks():
    masks = {}
    for fname in os.listdir(FRAGMENTS_DIR):
        if fname.endswith('.png') and fname[:-4].isdigit():
            idx = int(os.path.splitext(fname)[0])
            path = os.path.join(FRAGMENTS_DIR, fname)
            img = cv2.imread(path, cv2.IMREAD_GRAYSCALE)
            if img is not None:
                bin_mask = (img < 200).astype(np.uint8)
                masks[idx] = bin_mask
    return masks

fragment_masks = load_fragment_masks()

def count_hit_fragments(user_bin, fragment_masks, threshold=0.4, small_ids=None):
    if small_ids is None:
        small_ids = []

    hit_count = 0
    hit_ids = []
    small_hit_count = 0

    for frag_id, frag_mask in fragment_masks.items():
        frag_area = np.sum(frag_mask)
        intersection = np.sum((frag_mask == 1) & (user_bin == 1))
        if frag_area > 0 and (intersection / frag_area) >= threshold:
            hit_count += 1
            hit_ids.append(frag_id)
            if frag_id in small_ids:
                small_hit_count += 1

    return hit_count, hit_ids, small_hit_count

def extract_features(filepath):
    user = cv2.imread(filepath, cv2.IMREAD_GRAYSCALE)
    mask = cv2.imread(MASK_PATH, cv2.IMREAD_GRAYSCALE)
    fill = cv2.imread(FILL_PATH, cv2.IMREAD_GRAYSCALE)
    border = cv2.imread(BORDER_PATH, cv2.IMREAD_GRAYSCALE)
    if any(x is None for x in [user, mask, fill, border]):
        raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –æ–¥–Ω—É –∏–∑ –º–∞—Å–æ–∫")
    user_bin = (user < 200).astype(np.uint8)
    mask_bin = (mask < 200).astype(np.uint8)
    border_bin = (border < 200).astype(np.uint8)
    h, w = user.shape
    mid = w // 2
    total_fig_area = np.sum(mask_bin == 1)
    fill_inside = np.sum((user_bin == 1) & (mask_bin == 1))
    fill_ratio = fill_inside / total_fig_area if total_fig_area > 0 else 0
    left_mask = np.zeros_like(mask_bin)
    left_mask[:, :mid] = 1
    right_mask = np.zeros_like(mask_bin)
    right_mask[:, mid:] = 1
    left_area = np.sum(mask_bin & left_mask)
    right_area = np.sum(mask_bin & right_mask)
    left_fill = np.sum((user_bin == 1) & (mask_bin == 1) & (left_mask == 1))
    right_fill = np.sum((user_bin == 1) & (mask_bin == 1) & (right_mask == 1))
    left_ratio = left_fill / left_area if left_area > 0 else 0
    right_ratio = right_fill / right_area if right_area > 0 else 0
    center_mask = np.zeros_like(mask_bin)
    center_mask[:, mid - 50: mid + 50] = 1
    center_fill = np.sum((user_bin == 1) & (mask_bin == 1) & (center_mask == 1))
    center_ratio = center_fill / total_fig_area if total_fig_area > 0 else 0
    border_total = np.sum(border_bin == 1)
    outline_overlap = np.sum((user_bin == 1) & (border_bin == 1))
    outline_ratio = outline_overlap / border_total if border_total > 0 else 0
    outline_detected = outline_ratio >= 0.4
    frag_count, frag_ids, small_fragments = count_hit_fragments(user_bin, fragment_masks, threshold=0.4, small_ids=SMALL_FRAGMENT_IDS)
    outside_fill = np.sum((user_bin == 1) & (mask_bin == 0))
    outside_ratio = outside_fill / (h * w)
    return {
        'total_fill_ratio': fill_ratio,
        'left_ratio': left_ratio,
        'right_ratio': right_ratio,
        'fill_center': center_ratio,
        'outline_detected': bool(outline_detected),
        'outline_ratio': round(outline_ratio * 100, 2),
        'num_fragments': frag_count,
        'matched_fragment_ids': frag_ids,
        'small_fragments': small_fragments,
        'outside_ratio': outside_ratio
    }

def interpret(f):
    keys = []
    levels = {"suicidal": 0.0, "anxiety": 0.0, "depression": 0.0}

    # üéØ –°—É–∏—Ü–∏–¥–∞–ª—å–Ω–æ—Å—Ç—å
    levels["suicidal"] += f["left_ratio"] * 100  # –ß–µ–º –±–æ–ª—å—à–µ –∑–∞–∫—Ä–∞—à–µ–Ω–∞ –ª–µ–≤–∞—è —á–∞—Å—Ç—å ‚Äî —Ç–µ–º –≤—ã—à–µ —Ä–∏—Å–∫
    levels["suicidal"] += f["outside_ratio"] * 60  # –†–∏—Å–æ–≤–∞–Ω–∏–µ –≤–Ω–µ –≥—Ä–∞–Ω–∏—Ü –º–æ–∂–µ—Ç –≥–æ–≤–æ—Ä–∏—Ç—å –æ –Ω–µ—Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏

    if 0 < f["small_fragments"] <= 3 and f["num_fragments"] == f["small_fragments"]:
        keys.append("üî¥ –ï—Å–ª–∏ –∑–∞–∫—Ä–∞—à–µ–Ω–æ –Ω–µ –±–æ–ª—å—à–µ —Ç—Ä—ë—Ö –º–∞–ª–µ–Ω—å–∫–∏—Ö —á–∞—Å—Ç–µ–π ‚Äî –≤–æ–∑–º–æ–∂–Ω—ã —Å—É–∏—Ü–∏–¥–∞–ª—å–Ω—ã–µ –º—ã—Å–ª–∏ –≤ —Å–ª–æ–∂–Ω—ã—Ö –æ–±—Å—Ç–æ—è—Ç–µ–ª—å—Å—Ç–≤–∞—Ö.")
        levels["suicidal"] += 30 + (3 - f["small_fragments"]) * 5  # –ß–µ–º –º–µ–Ω—å—à–µ —Ñ—Ä–∞–≥–º–µ–Ω—Ç–æ–≤, —Ç–µ–º —Ç—Ä–µ–≤–æ–∂–Ω–µ–µ

    if f["num_fragments"] >= 1:
        keys.append("üî¥ –ü—Ä–æ–¥–æ–ª–∂–µ–Ω–Ω–æ–µ –∑–∞–∫—Ä–∞—à–∏–≤–∞–Ω–∏–µ –≥–æ–≤–æ—Ä–∏—Ç –æ –≤–æ–∑–º–æ–∂–Ω—ã—Ö –º—ã—Å–ª—è—Ö –æ —Å–º–µ—Ä—Ç–∏.")
        levels["suicidal"] += min(40, f["num_fragments"] * 5)  # –∑–∞ –∫–∞–∂–¥—ã–π —Ñ—Ä–∞–≥–º–µ–Ω—Ç –ø–æ 5 –±–∞–ª–ª–æ–≤

    if f["right_ratio"] >= 0.3:
        keys.append("üü† –ó–∞–∫—Ä–∞—à–∏–≤–∞–Ω–∏–µ –ø—Ä–∞–≤–æ–π —Å—Ç–æ—Ä–æ–Ω—ã ‚Äî –≤–æ–∑–º–æ–∂–Ω–æ, –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Å—É–∏—Ü–∏–¥–∞–ª—å–Ω–æ—Å—Ç–∏ –∫–∞–∫ —Å–ø–æ—Å–æ–±–∞ –≤–ª–∏—è–Ω–∏—è.")
        levels["suicidal"] += (f["right_ratio"] - 0.3) * 100

    # üéØ –î–µ–ø—Ä–µ—Å—Å–∏—è
    levels["depression"] += f["total_fill_ratio"] * 80  # –ø–ª–æ—Ç–Ω–æ–µ –∑–∞–∫—Ä–∞—à–∏–≤–∞–Ω–∏–µ
    levels["depression"] += f["fill_center"] * 40       # —Ñ–æ–∫—É—Å –Ω–∞ —Å–µ–±–µ

    if f["num_fragments"] >= 7:
        keys.append("üî¥ –ï—Å–ª–∏ –Ω–∞ –≤–∞—à–µ–º —Ä–∏—Å—É–Ω–∫–µ –æ–∫–∞–∑–∞–ª–æ—Å—å –±–æ–ª—å—à–µ –∑–∞–∫—Ä–∞—à–µ–Ω–Ω—ã—Ö, —á–µ–º –ø—É—Å—Ç—ã—Ö –º–µ—Å—Ç ‚Äî —ç—Ç–æ –≥–æ–≤–æ—Ä–∏—Ç –æ –º—Ä–∞—á–Ω–æ–º –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–∏.")
        levels["depression"] += 50

    if f["left_ratio"] >= 0.3:
        keys.append("üî¥ –ó–∞–∫—Ä–∞—à–∏–≤–∞–Ω–∏–µ –ª–µ–≤–æ–π —á–∞—Å—Ç–∏ –≥–æ–≤–æ—Ä–∏—Ç –æ –¥—É—à–µ–≤–Ω–æ–π —Ä–∞–Ω–∏–º–æ—Å—Ç–∏.")
        levels["depression"] += f["left_ratio"] * 100 * 0.6  # —É–º–µ—Ä–µ–Ω–Ω—ã–π –≤–∫–ª–∞–¥

    # üéØ –¢—Ä–µ–≤–æ–∂–Ω–æ—Å—Ç—å
    levels["anxiety"] += f["right_ratio"] * 90
    levels["anxiety"] += f["outside_ratio"] * 50

    if not f["outline_detected"]:
        levels["anxiety"] += 20  # –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –æ–±–≤–æ–¥–∫–∏

    if f["small_fragments"] == 0 and f["num_fragments"] >= 1:
        keys.append("üü† –í—ã –≤—ã–±–∏—Ä–∞–µ—Ç–µ —Å–∏–ª—å–Ω—ã–µ –∞–∫—Ü–µ–Ω—Ç—ã ‚Äî –≤–æ–∑–º–æ–∂–Ω–æ, —É –≤–∞—Å —Å—Ç—Ä–µ–º–ª–µ–Ω–∏–µ –∫ –∫–æ–Ω—Ç—Ä–æ–ª—é –∏–ª–∏ –∫ –ø–æ–¥–∞–≤–ª–µ–Ω–∏—é –¥–µ—Ç–∞–ª–µ–π.")
        levels["anxiety"] += 20

    if f["fill_center"] > 0.3:
        keys.append("üîµ –ó–∞–∫—Ä–∞—à–∏–≤–∞–Ω–∏–µ —Ü–µ–Ω—Ç—Ä–∞ –º–æ–∂–µ—Ç –≥–æ–≤–æ—Ä–∏—Ç—å –æ —Å–∞–º–æ–∞–Ω–∞–ª–∏–∑–µ –∏ —Å–æ—Å—Ä–µ–¥–æ—Ç–æ—á–µ–Ω–Ω–æ—Å—Ç–∏ –Ω–∞ —Å–µ–±–µ.")

    if f["outline_detected"] and f["num_fragments"] == 0 and f["small_fragments"] == 0:
        keys.append("üü¢ –ï—Å–ª–∏ –≤—ã —Ç–æ–ª—å–∫–æ –æ–±–≤–µ–ª–∏ —Ñ–∏–≥—É—Ä—É ‚Äî —ç—Ç–æ –≥–æ–≤–æ—Ä–∏—Ç –æ –≤–∞—à–µ–π –∂–µ–ª–µ–∑–Ω–æ–π –≤–æ–ª–µ –∏ —Å–∞–º–æ–∫–æ–Ω—Ç—Ä–æ–ª–µ.")
        levels["anxiety"] += 5

    if abs(f["left_ratio"] - f["right_ratio"]) < 0.05 and f["left_ratio"] > 0.2:
        keys.append("üü¢ –í—ã —Å—Ç—Ä–µ–º–∏—Ç–µ—Å—å –∫ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–º—É —Ä–∞–≤–Ω–æ–≤–µ—Å–∏—é. –í–∞—à —Ä–∏—Å—É–Ω–æ–∫ —Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω.")
        levels["anxiety"] -= 10

    if f["outside_ratio"] > 0.1:
        keys.append("üü† –ó–∞–∫—Ä–∞—à–µ–Ω–∞ —á–∞—Å—Ç—å –≤–Ω–µ —Ñ–∏–≥—É—Ä—ã ‚Äî –≤–æ–∑–º–æ–∂–Ω–æ, –≤—ã –ø—ã—Ç–∞–µ—Ç–µ—Å—å –≤—ã–π—Ç–∏ –∑–∞ —Ä–∞–º–∫–∏ –∏–ª–∏ —Ç–µ—Ä—è–µ—Ç–µ—Å—å –≤ —Å–µ–±–µ.")

    if not keys:
        keys.append("üü† –ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è –Ω–µ–æ–¥–Ω–æ–∑–Ω–∞—á–Ω–∞. –í–æ–∑–º–æ–∂–Ω–æ, –≤—ã –∑–∞–∫—Ä–∞—à–∏–≤–∞–ª–∏ —Å–ª—É—á–∞–π–Ω–æ.")
        levels["anxiety"] += 15

    # üîê –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –∏ –æ–∫—Ä—É–≥–ª–µ–Ω–∏–µ
    for k in levels:
        levels[k] = min(100.0, max(0.0, round(levels[k], 1)))

    # üßæ –û–±—â–∏–π –≤—ã–≤–æ–¥
    if levels["suicidal"] >= 70:
        overall = "üî¥ –í—ã—Å–æ–∫–∏–π —Ä–∏—Å–∫. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∑–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π."
    elif levels["depression"] >= 60:
        overall = "üîµ –ü—Ä–∏–∑–Ω–∞–∫–∏ –¥–µ–ø—Ä–µ—Å—Å–∏–∏. –ù—É–∂–Ω–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ."
    elif levels["anxiety"] >= 60:
        overall = "üü† –ü–æ–≤—ã—à–µ–Ω–Ω–∞—è —Ç—Ä–µ–≤–æ–∂–Ω–æ—Å—Ç—å. –í—ã –Ω–∞–ø—Ä—è–∂–µ–Ω—ã."
    elif levels["suicidal"] < 20 and levels["depression"] < 20:
        overall = "üü¢ –≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å –≤ –Ω–æ—Ä–º–µ."
    else:
        overall = "üü† –õ—ë–≥–∫–∞—è —Ç—Ä–µ–≤–æ–∂–Ω–æ—Å—Ç—å –∏ –Ω–∞–ø—Ä—è–∂–µ–Ω–∏–µ."

    return {
        "keys": keys,
        "summary": "\\n".join(keys),
        "levels": levels,
        "overall": overall
    }

@app.route("/")
def index():
    return render_template("index.html")

@app.route("/upload", methods=["POST"])
def upload():
    file = request.files["image"]
    nickname = request.form.get("user") or f"anon_{uuid.uuid4().hex[:6]}"

    filename = f"{uuid.uuid4().hex}.png"
    filepath = os.path.join(UPLOAD_DIR, filename)
    file.save(filepath)

    # ‚úÖ –°–æ–∑–¥–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å –Ω–∞–ª–æ–∂–µ–Ω–∏–µ–º —à–∞–±–ª–æ–Ω–∞
    composed_path = os.path.join(USER_RESULTS_DIR, f"{nickname}_composed.png")
    template = cv2.imread(TEMPLATE_PATH, cv2.IMREAD_GRAYSCALE)
    user_img = cv2.imread(filepath, cv2.IMREAD_GRAYSCALE)

    if user_img.shape != template.shape:
        user_img = cv2.resize(user_img, (template.shape[1], template.shape[0]))

    colored = cv2.cvtColor(template, cv2.COLOR_GRAY2BGR)
    user_mask = (user_img < 200)
    colored[user_mask] = (0, 0, 0)

    cv2.imwrite(composed_path, colored)

    # üëâ –ê–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    features = extract_features(filepath)
    result = interpret(features)

    # ‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
    user_data = {
        "nickname": nickname,
        "timestamp": datetime.now().isoformat(),
        "filename": filename,
        "user_image": f"{nickname}_composed.png",  # –≤–∞–∂–Ω–æ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        "features": features,
        "levels": result["levels"],
        "overall": result["overall"],
        "keys": result["keys"]
    }

    with open(os.path.join(USER_RESULTS_DIR, f"{nickname}.json"), "w", encoding="utf-8") as f:
        json.dump(user_data, f, ensure_ascii=False, indent=2)

    entry = Result(
        nickname=nickname,
        timestamp=user_data["timestamp"],
        image=user_data["user_image"],
        suicidal=user_data["levels"]["suicidal"],
        anxiety=user_data["levels"]["anxiety"],
        depression=user_data["levels"]["depression"],
        keys="\n".join(user_data["keys"])
    )
    
    try:
        db.session.add(entry)
        db.session.commit()
        print("‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ PostgreSQL:", entry.nickname)
    except Exception as e:
        print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏:", e)


    return jsonify({
        "result": result["summary"],
        "levels": result["levels"],
        "overall": result["overall"],
        "keys": result["keys"],
        "features": features,
        "filename": filename,
        "user_image": f"{nickname}_composed.png"
    })


@app.route("/result/<nickname>")
def result_page(nickname):
    path = os.path.join(USER_RESULTS_DIR, f"{nickname}.json")
    if not os.path.exists(path):
        return f"–†–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {nickname} –Ω–µ –Ω–∞–π–¥–µ–Ω."

    with open(path, "r", encoding="utf-8") as f:
        data = json.load(f)

    image_url = url_for("static", filename=f"uploads/{data['filename']}")
    return render_template("result.html", image_url=image_url, **data)

# üîí –ê–¥–º–∏–Ω –ª–æ–≥–∏–Ω
from flask import session, redirect
app.secret_key = 'your_secret_key_here'

@app.route("/login", methods=["GET", "POST"])
def login():
    if request.method == "POST":
        if request.form.get("password") == "rusik2002":
            session["admin"] = True
            return redirect("/admin")
        else:
            return "–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å"
    return '''<form method="post"><input type="password" name="password"><button type="submit">–í–æ–π—Ç–∏</button></form>'''

@app.route("/logout")
def logout():
    session.pop("admin", None)
    return redirect("/login")

from flask import session, redirect

@app.route("/admin")
def admin_panel():
    if not session.get("admin"):
        return redirect("/login")

    min_suicidal = request.args.get("suicidal", type=int)
    min_anxiety = request.args.get("anxiety", type=int)
    min_depression = request.args.get("depression", type=int)
    user_filter = request.args.get("user", type=str)
    key_filter = request.args.get("key", type=str)
    date_from = request.args.get("date_from", type=str)
    date_to = request.args.get("date_to", type=str)
    sort_by = request.args.get("sort", default="timestamp")
    order = request.args.get("order", default="desc")
    export = request.args.get("export") == "1"

    records = []
    for fname in os.listdir(USER_RESULTS_DIR):
        if fname.endswith(".json"):
            path = os.path.join(USER_RESULTS_DIR, fname)
            with open(path, "r", encoding="utf-8") as f:
                data = json.load(f)
                levels = data.get("levels", {})
                nickname = data.get("nickname", "N/A")
                ts = data.get("timestamp", "‚Äî")
                keys = data.get("keys", [])
                image = data.get("user_image", "")
                suicidal = levels.get("suicidal", 0)
                anxiety = levels.get("anxiety", 0)
                depression = levels.get("depression", 0)

                if min_suicidal is not None and suicidal < min_suicidal:
                    continue
                if min_anxiety is not None and anxiety < min_anxiety:
                    continue
                if min_depression is not None and depression < min_depression:
                    continue
                if user_filter and user_filter.lower() not in nickname.lower():
                    continue
                if key_filter and not any(key_filter.lower() in k.lower() for k in keys):
                    continue
                if date_from and ts < date_from:
                    continue
                if date_to and ts > date_to:
                    continue

                records.append({
                    "nickname": nickname,
                    "timestamp": ts,
                    "suicidal": suicidal,
                    "anxiety": anxiety,
                    "depression": depression,
                    "image": image
                })

    reverse = (order == "desc")
    if sort_by in ["nickname", "timestamp", "suicidal", "anxiety", "depression"]:
        records.sort(key=lambda x: x[sort_by], reverse=reverse)

    if export:
        output = io.StringIO()
        writer = csv.writer(output, delimiter=';', quoting=csv.QUOTE_MINIMAL)
        writer.writerow(["–ù–∏–∫–Ω–µ–π–º", "–î–∞—Ç–∞", "–°—É–∏—Ü–∏–¥–∞–ª—å–Ω–æ—Å—Ç—å", "–¢—Ä–µ–≤–æ–∂–Ω–æ—Å—Ç—å", "–î–µ–ø—Ä–µ—Å—Å–∏—è"])
        for r in records:
            date_only = r["timestamp"].split("T")[0]
            writer.writerow([r['nickname'], date_only, f"{r['suicidal']}%", f"{r['anxiety']}%", f"{r['depression']}%"])
        csv_content = output.getvalue().encode("utf-8-sig")
        filename = "—Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã_–∞–Ω–∞–ª–∏–∑–∞.csv"
        safe_filename = quote(filename)
        return Response(csv_content, content_type="text/csv", headers={"Content-Disposition": f"attachment; filename*=UTF-8''{safe_filename}"})

    def sort_link(field, title):
        new_order = "asc" if sort_by != field or order == "desc" else "desc"
        base = f"?sort={field}&order={new_order}"
        for p in ["suicidal", "anxiety", "depression", "user", "key", "date_from", "date_to"]:
            val = request.args.get(p)
            if val:
                base += f"&{p}={val}"
        arrow = " üîΩ" if sort_by == field and order == "desc" else " üîº" if sort_by == field else ""
        return f'<a href="{base}">{title}{arrow}</a>'

    rows = ""
    for r in records:
        bg = ""
        if r["suicidal"] >= 70 or r["depression"] >= 70:
            bg = 'bg-red-100'
        elif r["suicidal"] <= 10 and r["anxiety"] <= 10 and r["depression"] <= 10:
            bg = 'bg-green-100'
        date_only = r["timestamp"].split("T")[0]
        image_tag = f'<img src="/static/user_results/{r["image"]}" class="w-12 h-auto inline">' if r["image"] else ""
        rows += f"""
            <tr class="{bg}">
                <td class='p-2'>{r["nickname"]}</td>
                <td class='p-2'>{date_only}</td>
                <td class='p-2'>{r["suicidal"]}%</td>
                <td class='p-2'>{r["anxiety"]}%</td>
                <td class='p-2'>{r["depression"]}%</td>
                <td class='p-2'>{image_tag}</td>
                <td class='p-2'><a href="/result/{r['nickname']}" target="_blank" class="text-blue-600 hover:underline">–û—Ç–∫—Ä—ã—Ç—å</a></td>
            </tr>
        """

    return f"""
    <html>
    <head>
        <meta charset='utf-8'>
        <title>–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å</title>
        <link href='https://cdn.jsdelivr.net/npm/@unocss/reset/tailwind.min.css' rel='stylesheet'>
        <script src='https://cdn.tailwindcss.com'></script>
    </head>

    <body class='bg-gray-100 text-gray-800'>
    <div class='max-w-7xl mx-auto py-10 px-4'>
        <h1 class='text-3xl font-bold mb-6'>üìä –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å: –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞</h1>

        <!-- üéØ –ó–∞–≥—Ä—É–∑–∫–∞ –∏ —Ä–∞—Å—Å—ã–ª–∫–∞ –Ω–∏–∫–æ–≤ -->
        <div class="bg-white p-4 rounded shadow mb-6">
            <h2 class="text-lg font-semibold mb-2">üì• –ó–∞–≥—Ä—É–∑–∫–∞ –∏ —Ä–∞—Å—Å—ã–ª–∫–∞ —Å–ø–∏—Å–∫–∞ –Ω–∏–∫–æ–≤</h2>
            <form id="uploadForm" enctype="multipart/form-data" class="flex flex-col md:flex-row md:items-center gap-4">
                <input type="file" name="nickfile" required class="border p-2 rounded w-full max-w-xs">
                <button type="submit" class="bg-blue-600 text-white px-4 py-2 rounded">üì§ –ó–∞–≥—Ä—É–∑–∏—Ç—å –Ω–∏–∫–∏</button>
                <a href="/admin/send_links_from_file" class="bg-purple-600 text-white px-4 py-2 rounded text-center">üì® –†–∞–∑–æ—Å–ª–∞—Ç—å</a>
            </form>
            <p id="statusMessage" class="text-green-600 mt-2"></p>
        </div>

        <!-- üß† –§–∏–ª—å—Ç—Ä—ã -->
        <form method='get' class='grid grid-cols-2 md:grid-cols-4 gap-4 bg-white p-4 rounded shadow mb-6'>
            <input type='number' name='suicidal' placeholder='–°—É–∏—Ü–∏–¥ ‚â•' value='{min_suicidal or ''}' class='border p-2 rounded'>
            <input type='number' name='anxiety' placeholder='–¢—Ä–µ–≤–æ–∂–Ω ‚â•' value='{min_anxiety or ''}' class='border p-2 rounded'>
            <input type='number' name='depression' placeholder='–î–µ–ø—Ä–µ—Å—Å ‚â•' value='{min_depression or ''}' class='border p-2 rounded'>
            <input type='text' name='user' placeholder='–ù–∏–∫–Ω–µ–π–º' value='{user_filter or ''}' class='border p-2 rounded'>
            <input type='text' name='key' placeholder='–ö–ª—é—á' value='{key_filter or ''}' class='border p-2 rounded'>
            <input type='date' name='date_from' value='{date_from or ''}' class='border p-2 rounded'>
            <input type='date' name='date_to' value='{date_to or ''}' class='border p-2 rounded'>
            <button class='bg-blue-600 text-white px-4 py-2 rounded'>–§–∏–ª—å—Ç—Ä–æ–≤–∞—Ç—å</button>
        </form>

        <!-- üîó –ö–Ω–æ–ø–∫–∏ -->
        <div class='flex gap-4 mb-6'>
            <a href='/admin' class='text-sm text-blue-600 hover:underline'>‚õî –°–±—Ä–æ—Å–∏—Ç—å</a>
            <a href='{request.full_path}&export=1' class='text-sm text-green-600 hover:underline'>‚¨áÔ∏è –≠–∫—Å–ø–æ—Ä—Ç CSV</a>
        </div>

        <!-- üìÑ –¢–∞–±–ª–∏—Ü–∞ -->
        <div class='overflow-auto bg-white rounded shadow'>
            <table class='table-auto w-full text-sm'>
                <thead class='bg-gray-200'>
                    <tr>
                        <th class='p-2'>{sort_link("nickname", "–ù–∏–∫")}</th>
                        <th class='p-2'>{sort_link("timestamp", "–î–∞—Ç–∞")}</th>
                        <th class='p-2'>{sort_link("suicidal", "–°—É–∏—Ü–∏–¥")}</th>
                        <th class='p-2'>{sort_link("anxiety", "–¢—Ä–µ–≤–æ–∂–Ω")}</th>
                        <th class='p-2'>{sort_link("depression", "–î–µ–ø—Ä–µ—Å—Å")}</th>
                        <th class='p-2'>–ò–∑–æ–±—Ä.</th>
                        <th class='p-2'>–°—Å—ã–ª–∫–∞</th>
                    </tr>
                </thead>
                <tbody>{rows}</tbody>
            </table>
        </div>
    </div>

    <!-- üß© –°–∫—Ä–∏–ø—Ç –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∏–∫–æ–≤ -->
    <script>
    document.addEventListener("DOMContentLoaded", function () {{
        const form = document.getElementById("uploadForm");
        form.addEventListener("submit", async function (e) {{
            e.preventDefault();
            const formData = new FormData(form);
            const res = await fetch("/admin/upload_nicknames", {{
                method: "POST",
                body: formData,
            }});
            const text = await res.text();
            document.getElementById("statusMessage").textContent = text;
        }});
    }});
    </script>
    </body>
    </html>
    """


@app.route("/admin/send_links")
def send_links():
    uploaded_nicks_path = os.path.join(LINK_LOGS_DIR, "uploaded_nicks.txt")
    use_uploaded = os.path.exists(uploaded_nicks_path)

    # –§–∏–ª—å—Ç—Ä—ã
    min_suicidal = request.args.get("suicidal", type=int)
    min_anxiety = request.args.get("anxiety", type=int)
    min_depression = request.args.get("depression", type=int)

    filtered_nicknames = []
    uploaded_nicks = set()

    if use_uploaded:
        with open(uploaded_nicks_path, "r", encoding="utf-8") as f:
            uploaded_nicks = set(line.strip() for line in f)

    for fname in os.listdir(USER_RESULTS_DIR):
        if fname.endswith(".json"):
            path = os.path.join(USER_RESULTS_DIR, fname)
            with open(path, "r", encoding="utf-8") as f:
                data = json.load(f)
                levels = data.get("levels", {})
                nickname = data.get("nickname")
                if not nickname:
                    continue

                if use_uploaded and nickname not in uploaded_nicks:
                    continue

                if not use_uploaded:
                    if min_suicidal and levels.get("suicidal", 0) < min_suicidal:
                        continue
                    if min_anxiety and levels.get("anxiety", 0) < min_anxiety:
                        continue
                    if min_depression and levels.get("depression", 0) < min_depression:
                        continue

                filtered_nicknames.append(nickname)

    now = datetime.now().strftime("%Y-%m-%d_%H-%M")
    filename = f"filtered_links_{now}.txt"
    path = os.path.join(LINK_LOGS_DIR, filename)

    with open(path, "w", encoding="utf-8") as f:
        for nick in filtered_nicknames:
            link = f"https://example.com/?user={nick}"
            f.write(link + "\n")

    return Response(
        open(path, "rb").read(),
        content_type="text/plain",
        headers={"Content-Disposition": f"attachment; filename={filename}"}
    )


@app.route("/admin/upload_nicknames", methods=["POST"])
def upload_nicknames():
    file = request.files.get("nickfile")
    if not file:
        return "–§–∞–π–ª –Ω–µ –≤—ã–±—Ä–∞–Ω", 400

    content = file.read().decode("utf-8")
    nicknames = [line.strip() for line in content.splitlines() if line.strip()]

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ª–æ–≥
    os.makedirs(LINK_LOGS_DIR, exist_ok=True)
    path = os.path.join(LINK_LOGS_DIR, "target_nicknames.txt")
    with open(path, "w", encoding="utf-8") as f:
        for nick in nicknames:
            f.write(nick + "\n")

    return "–ù–∏–∫–∏ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã!"

@app.route("/admin/send_links_from_file")
def send_links_from_file():
    path = os.path.join(LINK_LOGS_DIR, "target_nicknames.txt")
    if not os.path.exists(path):
        return "–°–Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª —Å –Ω–∏–∫–∞–º–∏.", 400

    # ‚úÖ –ó–∞–ø—É—Å–∫ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ —Å–∫—Ä–∏–ø—Ç–∞
    subprocess.Popen([sys.executable, "send_test.py"])

    return "‚è≥ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–ø—É—â–µ–Ω–∞! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–Ω—Å–æ–ª—å."

@app.route("/admin/test_db")
def test_db():
    results = Result.query.all()
    return f"–í –±–∞–∑–µ —Å–µ–π—á–∞—Å {len(results)} –∑–∞–ø–∏—Å–µ–π"

@app.route("/init_db")
def init_db():
    with app.app_context():
        db.create_all()
    return "‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏ —Ç–∞–±–ª–∏—Ü—ã —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω—ã!"

if __name__ == "__main__":
    with app.app_context():
        db.create_all()
    app.run(debug=True)
