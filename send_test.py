from telethon import TelegramClient
from telethon.errors import UsernameNotOccupiedError, PeerIdInvalidError, UserPrivacyRestrictedError
import asyncio

api_id = 21409208
api_hash = 'ea7a50ff782cacf103cfb3636914f224'
session_name = 'user_session'

FILENAME = 'logs/links/target_nicknames.txt'

def generate_message(username):
    return (f"üß† –ü—Ä–∏–≤–µ—Ç! –Ø –¥–µ–ª–∞—é –¥–∏–ø–ª–æ–º –ø–æ –≤–∏–∑—É–∞–ª—å–Ω–æ–º—É –≤–æ—Å–ø—Ä–∏—è—Ç–∏—é –∏ —Å–æ–±–∏—Ä–∞—é –∞–Ω–æ–Ω–∏–º–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã. –ù—É–∂–Ω–æ –ø—Ä–æ—Å—Ç–æ –∑–∞–∫—Ä–∞—Å–∏—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫—É. –≠—Ç–æ –Ω–µ —Ç–µ—Å—Ç –∏ –Ω–µ –æ—Ü–µ–Ω–∫–∞, –ø—Ä–æ—Å—Ç–æ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ) –ú–æ–∂–µ—à—å –ø–æ–º–æ—á—å? –í–æ—Ç —Å—Å—ã–ª–∫–∞ üëâ https://diplomissledovanie.onrender.com/?user={username.lstrip('@')}")

async def send_links():
    client = TelegramClient(session_name, api_id, api_hash)
    await client.start()

    with open(FILENAME, 'r', encoding='utf-8') as f:
        usernames = [line.strip() for line in f if line.strip()]

    for username in usernames:
        try:
            entity = await client.get_entity(username)
            if hasattr(entity, 'bot') and entity.bot:
                print(f"‚õî {username} ‚Äî —ç—Ç–æ –±–æ—Ç. –ü—Ä–æ–ø—É—â–µ–Ω.")
                continue

            await client.send_message(entity, generate_message(username))
            print(f"‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {username}")

        except UsernameNotOccupiedError:
            print(f"‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω: {username}")
        except UserPrivacyRestrictedError:
            print(f"üîí –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç–∏: {username}")
        except PeerIdInvalidError:
            print(f"‚ö†Ô∏è –ù–µ–ª—å–∑—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å: {username}")
        except Exception as e:
            print(f"üî• –û—à–∏–±–∫–∞ —É {username}: {e}")

    await client.disconnect()

if __name__ == '__main__':
    asyncio.run(send_links())
